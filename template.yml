LambdaRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Sid: LambdaAssumeRolePolicy
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Path: /
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaFullAccess

LambdaDeadLetterQueue:
  Type: AWS::Lambda::Function
  Properties:
    Code:
      ZipFile: |
        from __future__ import print_function
        from botocore.exceptions import ClientError
        import cfnresponse
        import boto3
        def handler(event, context):
            if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            function_name = event['ResourceProperties']['FunctionName']
            target_arn = event['ResourceProperties']['TargetArn']
            try:
                resp = boto3.client('lambda').update_function_configuration(
                        FunctionName=function_name,
                        DeadLetterConfig={'TargetArn': target_arn})
            except ClientError as e:
                print(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            else:
                print(resp)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
    Handler: index.handler
    Role:
      Fn::GetAtt: LambdaRole.Arn
    Runtime: python2.7
